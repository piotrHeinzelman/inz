------------------------

Temat i zakres pracy !!!!!!!!!!!

Ważne!

Na początku pracy nad dyplomem trzeba sformułować tytuł i zakres pracy. Zwłaszcza ten drugi wymaga wstępnego zorientowania się w tematyce, czyli przekopania internetu, porozmawiania z promotorem i ustalenia jakiejś realizowalnej wersji. Rolą promotora jest doszlifowanie zakresu, który następnie zostanie zaakceptowany (lub nie) przez kierownika Zakładu (w naszym przypadku przez prof. Iwanowskiego).
Wstępny temat i zakres pracy należy umieścić w wątku o tytule "Temat i zakres pracy" na własnym kanale. W toku wstępnego rozeznania się i rozmów skrystalizuje się zakres pracy, który powinien przyjąć formę zbliżoną do poniższej.
Temat: System utrzymywania toru ruchu z wykorzystaniem głębokich sieci neuronowych i robota opartego na układzie NVIDIA Jetson Nano
Zakres:
1. Wstęp.
2. Przegląd istniejących rozwiązań.
3. Opis platformy eksperymentalnej.
4. Implementacja wybranego rozwiązania.
5. Stworzenie zbioru danych.
6. Badanie i analiza wpływu wybranych parametrów systemu na zachowanie robota.
7. Podsumowanie i wnioski.
 
Do każdego punktu należy dodać kilka zdań opisu, żeby było to nieco bardziej treściwe. Np. we wstępie powinno się znaleźć wprowadzenia do tematyki pracy, coś o motywacji podjęcia tematu oraz sformułowanie celu pracy. W przeglądzie można napisać coś o liczbie istniejących rozwiązań, które będą brane pod uwagę (czasem jest ich kilka, a czasem dziesiątki). Opis platformy ma sens wtedy, jeżeli ma powstać jakieś urządzenie - wtedy kilka słów o nim. Implementacja - co, jak i czym. Jak będą tworzone jakieś zbiory danych, to warto uzasadnić dlaczego. Potem jak to będzie badane, analizowane, porównywane i z czym. Ostatni punkt powinien zawierać 3 elementy: podsumowanie przeprowadzonych prac, ocena uzyskanych wyników oraz sugestie dotyczące dalszego rozwoju projektu.
 
Rozszerzony przykład:
1. Wstęp
Wprowadzenie do tematyki sterowania wizyjnego w procesach autonomicznych robotów.

Problematyka ergonomii i efektywności w istniejących systemach manualnego sterowania robotami.

Cel pracy oraz krótki opis proponowanego rozwiązania — autonomicznego robota sterowanego wizyjnie.
2. Przegląd istniejących rozwiązań
Analiza trzech aktualnie dostępnych autonomicznych robotów wykorzystywanych w logistyce lub produkcji.

Przegląd procesów wykorzystujących roboty manualnie sterowane lub oparte na tradycyjnych czujnikach.

Identyfikacja ograniczeń i problemów związanych z obecnymi rozwiązaniami.
3. Opis proponowanego rozwiązania
Opis koncepcji autonomicznego robota sterowanego systemem wizyjnym.

Omówienie specyfiki zastosowanego oprogramowania oraz algorytmów wykorzystywanych do nawigacji i wykrywania obiektów.

Projektowanie hardware’u robota, w tym integracja systemu wizyjnego, zasilania oraz sposobu montażu.
4. Opis platformy eksperymentalnej
Opis środowiska testowego i narzędzi wykorzystanych do oceny efektywności nowego robota (czujniki, kamery, systemy kontrolne).

Charakterystyka użytych urządzeń, w tym robotów, czujników wizyjnych i jednostek przetwarzających.
5. Implementacja rozwiązania
Proces integracji i wdrożenia systemu wizyjnego do autonomicznego robota.

Integracja systemu wizyjnego, czujników i oprogramowania z platformą robota.

Testy funkcjonalne i operacyjne nowego robota.
6. Badanie i analiza efektywności systemu
Analiza czasu realizacji zadań i liczby operacji wykonanych przez robota sterowanego wizyjnie w porównaniu do tradycyjnych robotów.

Ocena ergonomii i wpływu na użytkowników systemu.

Przegląd możliwych problemów i ich rozwiązań.
7. Podsumowanie i wnioski
Podsumowanie przeprowadzonych badań.

Wnioski dotyczące efektywności nowego rozwiązania.

Propozycje dalszych kierunków badań oraz możliwości wdrożenia rozwiązania na szerszą skalę.
 
Generalnie punkty 1, 2 i 7 powinny być zawsze. Pozostałe są zależne od rodzaju pracy i nie powinny być przepisane stąd dosłownie. Jeśli praca ma charakter mocno praktyczny i jest związana ze sprzętem, to następuje opis sprzętu (platformy badawczej), a następnie implementacji wybranego rozwiązania danego problemu oraz wyników przeprowadzonych eksperymentów. W pracy bez użycia specjalistycznego sprzętu (do takiego nie zalicza się normalnego komputera i kamery), większy nacisk będzie położony na przykład na badanie i porównywanie wybranych metod. Tak to, z grubsza, powinno wyglądać. Liczba punktów jest płynna, a ich tytuły nie muszą się potem zgadzać z tytułami rozdziałów. To ma być ogólne, w punktach, przedstawienie tego co się będzie w pracy robiło. Jeśli praca jest bardziej teoretyczna czy też tylko komputerowa (jakieś rozpoznawanie obrazów, ale bez żadnych robotów), to trzeba opisać wykorzystywane narzędzia (zamiast platformy), jeśli badania mają polegać na testowaniu różnych algorytmów (np. różnych głębokich sieci), to trzeba zrobić jakieś wprowadzenie do tych algorytmów. Ważne jest, żeby zakres pracy był na tyle ogólny, aby nie zmuszał już na początku do realizacji jakichś bardzo konkretnych zadań, bo może się później okazać, że te zadania/metody/rozwiązania zostały niezbyt dobrze na początku dobrane (co jest usprawiedliwione, wszak na początku opracowywane zagadnienia nie są bardzo dobrze znane) i nie ma sensu ich badać (bo znalazły się lepsze). Tymczasem wówczas recenzent może powiedzieć, i słusznie, że treść pracy nie odpowiada jej zakresowi. Z drugiej strony, zakres pracy nie może być tak ogólny, by pasował do każdej pracy. Jakiś złoty środek trzeba znaleźć.
Propozycję tematu i zakresu pracy należy umieścić w analogicznym wątku na własnym kanale, potem wspólnie to doszlifujemy. Gotową wersję wpiszę do Isoda i przekażę prof. Sierociukowi do zatwierdzania lub ewentualnej korekty.
 
-----------------------------------


Zanim pierwsza wersja pracy trafi do promotora
Ważne!


Oto lista najczęściej popełnianych błędów - drobnych błędów, acz rzucających złe światło na całą pracę i dodająca mi masę niepotrzebnej roboty.
Zanim pierwsza wersja całej pracy lub jej większy fragment trafi do mnie, bardzo proszę upewnić się, że:
tytuł pracy (w obu językach!) jest zgodny z tym co jest wpisane w Isodzie,
do każdej ilustracji czy tabeli w tekście jest odniesienie typu: na rys. xx pokazano coś tam, w tabeli yy umieszczono wyniki czegoś tam,
każda ilustracja powinna mieć wskazane źródło,
skróty odniesień do rysunków i tabel należy pisać generalnie od małej litery, np. na rys. 5 pokazano (nie na Rys. 5), 
opis rysunku jest pod rysunkiem, opis tablicy nad tablicą,
listy kropkowane, takie jak ta, powinny być sformatowane tak jak ta lista (wielkie litery, przecinki),
jeśli wymieniamy 3 konkretne elementy, fazy, rozwiązania, to lepiej umieścić je w liście numerowanej (o innym formatowaniu) niż w kropkowanej, która zazwyczaj służy do wymienienia iluś tam elementów, bez ich wyliczenia na początku,
skorzystaliście Państwo z narzędzia https://languagetool.org/pl, które bardzo ułatwia znalezienie błędów ortograficznych, stylistycznych, interpunkcyjnych oraz literówek i powtórzeń; należy zastosować się do zdecydowanej większości sugestii tego narzędzia, ono dobrze się integruje z Overleafem z poziomu przeglądarki,
wszystkie liczby w pracy podane są w polskim formacie czyli 3,14, a nie 3.14,
cudzysłowy są polskie, czyli w Latexu ,,coś tam'', a nie "Ala ma kota",
apostrofy nie są nadużywane (Gogol'a - źle, de Gaulle'a czy Google'a- dobrze),
odróżniacie i stosujecie Państwo w pracy procenty i punkty procentowe (jak coś zmieni się z 70% na 60%, to zmieni się o 10 p.p. lub o 14%) ,
w przypadku umieszczania wzorów, objaśnienia symboli umieszczone są po słowie ,,gdzie'', przed którym nie ma przecinka,
wyróżnienia nie są dublowane, czyli jeśli kursywa, to nie cudzysłów czy pogrubienie,
dane w tabelach są czytelne i łatwo porównywalne (czasem trudno odpowiednio sformatować tabele),
tabelom z danymi musi towarzyszyć komentarz - nie można, ot tak, wrzucić tabeli z liczbami i już - trzeba ją choć trochę zinterpretować,
w rozdziale podsumowującym wykonane prace znajduje się zdanie odsyłające do repozytorium kodu związanego z pracą na githubie - to dotyczy większości prac, choć znajdą się wyjątki,
odnośniki do literatury są przed, a nie za znakiem interpunkcyjnym, czyli NIE TAK jak na końcu tego wiersza, [x]
każda z pozycji w bibliografii jest odpowiednio opisana; w przypadku artykułów można znaleźć ich opis w formacie Bibtex w sieci, a w przypadku stron internetowych trzeba pamiętać o podaniu daty ostatniego dostępu do danego zasobu (można także skorzystać z narzędzia https://www.bibme.org/bibtex ale też trzeba je weryfikować),
słowo ilość stosowane jest do rzeczy niepoliczalnych (ilość obliczeń, czasu), a liczba do policzalnych (liczba neuronów, iteracji, obrazów),
Overleaf nie wyświetla błędów kompilacji (czerwona liczba na górze)!
Jednocześnie przypominam, że kompletną pracę powinienem dostać przynajmniej na 2 tygodnie przed terminem jej złożenia (to jest absolutne minimum), gdyż tyle może zająć wprowadzenie niezbędnych poprawek, zwłaszcza w sytuacji, gdy mam więcej niż jedną pracę do korekty!
Internetowe narzędzie do sprawdzania gramatyki, stylu i pisowni - LanguageTool
LanguageTool to darmowa usługa do korekty języka angielskiego, hiszpańskiego i 30 innych języków. Natychmiastowo sprawdź swój tekst pod kątem błędów gramatycznych i stylistycznych.


-----------------------------------------------------------


Pożądany termin obrony pracy


Proszę w analogicznym wątku na własnym kanale określić kiedy miałaby nastąpić obrona pracy. Wystarczy ogólnie - styczeń, luty, czerwiec, wrzesień, grudzień - w tych miesiącach najczęściej mamy obrony.
Proszę określić termin pożądany, drugi termin, do kiedy jeszcze jest możliwość przesunięcia obrony oraz termin absolutnie ostateczny. Czasami ten ostateczny będzie tym najbardziej pożądanym i najczęściej (w przypadku prac inżynierskich) jest to luty, kiedy następuje rejestracja na studia drugiego stopnia. Wówczas trzeba się sprężać. Czasami obronę można spokojnie przesunąć na czerwiec czy nawet na wrzesień i nic się nie stanie. Określenie tych terminów pomoże mi w opiece nad pracą.
Proszę pamiętać, że praca musi być gotowa 2 tygodnie przed obroną, a żeby była gotowa w tym czasie, ja muszę dostać praktycznie skończoną pracę 2 tygodnie wcześniej. Wówczas będzie czas na ostatnie poprawki. 
Nie gwarantuję, że praca oddana mi jako gotowa na mniej 3 tygodnie przed obroną zostanie dopuszczona do obrony w preferowanym terminie! Czasami prace wymagają tylu poprawek, że nie da się ich zrobić w kilka dni.


-------------------------------------------------



Obrona pracy
Terminy obron wyznaczane są zwykle w lutym, maju, czerwcu, wrześniu, październiku i grudniu.
 
Na obronę należy przygotować około 10-minutową prezentację z wykorzystaniem szablonu wydziałowego. Należy w niej podać cele i założenia pracy, opisać krótko jej przebieg, podkreślić najważniejsze osiągnięcia i rezultaty, wspomnieć o istotnych trudnościach i podsumować całość, najlepiej sugerując jak można by jeszcze rozwinąć projekt.
 
Odradza się demonstrowanie działania opracowanych projektów na żywo, chyba że ktoś jest absolutnie przekonany, że da się to uruchomić bardzo sprawnie i wszystko będzie działać. No ale trzeba pamiętać o prawie Murphy'ego. Dlatego lepiej jest pokazać to na filmie podczas prezentacji, a ewentualne urządzenie przynieść i postawić na stole (o ile jest dostatecznie małe).
 
Podczas obrony padną 3 pytania z zakresu studiów. Nie ma listy pytań. Pytania dotyczą wszystkich przedmiotów na studiach, ale najczęściej padają z informatyki, automatyki i robotyki, baz danych i przetwarzania obrazów. Potencjalną listę tematów można nieco zawęzić po ustaleniu składu komisji - wówczas można sprawdzić jakie przedmioty prowadzą członkowie komisji w ogóle oraz jakie przedmioty tego prowadzącego były podczas studiów dyplomanta - z tych przedmiotów najczęściej padają pytania. Pytania są zwykle dość podstawowe, nikt nie wymaga pamiętania czy wyprowadzania złożonych wzorów



---------------------------------------------
 

Regularne informowanie o postępach w pracy
Dyplomy 2024
Bardzo proszę o regularne wpisy na temat postępów w pracy. Optymalnie - krótki wpis raz w tygodniu, ewentualnie raz na dwa tygodnie.
Kolejne wpisy powinny być oddzielnymi wpisami zatytułowanymi Raport x, gdzie x będzie kolejnym numerem raportu. W treści należy opisać co się w ostatnim okresie zrobiło. Jeśli przez ostatni okres (tydzień lub maksymalnie dwa) nic się w ramach pracy nie działo, to po prostu proszę napisać - brak postępów. Powody nieistotne. Będę wówczas wiedział, że przynajmniej pamiętacie Państwo o pracy. Inne wpisy mogą być lakoniczne (np. poszukiwanie istniejących rozwiązań <tu wymienić kilka znalezionych>), lub bardziej obszerne (jeśli działo się więcej).
 
W opinii o pracy dyplomowej, jednym z kryteriów oceny jest ocena współpracy z dyplomantem, regularności pracy, raportowania postępów i terminowości wykonania pracy. Brak takich raportów obniży ocenę końcową. Może być też argumentem przeciwko przedłużeniu terminu złożenia pracy, na co zgodę wydaje dziekanat



-------------------------------



Temat i zakres pracy dyplomowej
Na początku pracy nad dyplomem trzeba sformułować tytuł i zakres pracy. Zwłaszcza ten drugi wymaga wstępnego zorientowania się w tematyce, czyli przekopania internetu, porozmawiania z promotorem i ustalenia jakiejś realizowalnej wersji. 
 
Temat szkic: Porównanie języków programowania (Matlab, Python, C??) 
+ewentualnie rozwiąziązań technicznych (GPU, CPU, FPGA) w zastosowaniach NN , Deep NN 
 
Zakres:
1. Wstęp.
2. Przegląd istniejących rozwiązań. (Python, Matlab, C? , CPU, GPU FPGA )
3. Opis platformy eksperymentalnej.
4. Implementacja wybranych rozwiązań.
5. Stworzenie zbioru danych.
6. Badanie i analiza i porównanie wyników.
7. Podsumowanie i wnioski.
 
Badania mają polegać na testowaniu różnych algorytmów (np. różnych głębokich sieci), to trzeba zrobić jakieś wprowadzenie do tych algorytmów. Ważne jest, żeby zakres pracy był na tyle ogólny, aby nie zmuszał już na początku do realizacji jakichś bardzo konkretnych zadań, bo może się później okazać, że te zadania/metody/rozwiązania zostały niezbyt dobrze na początku dobrane (co jest usprawiedliwione, wszak na początku opracowywane zagadnienia nie są bardzo dobrze znane) i nie ma sensu ich badać (bo znalazły się lepsze). Tymczasem wówczas recenzent może powiedzieć, i słusznie, że treść pracy nie odpowiada jej zakresowi. Z drugiej strony, zakres pracy nie może być tak ogólny, by pasował do każdej pracy. Jakiś złoty środek trzeba znaleźć






-------------------------------



Czajewski Witold
17.09 17:14
FPGA odpuszczamy raczej, nie mamy dostępu, nie jest to popularne rozwiązanie. 
Interesują nas popularne języki programowania i oferujące duże wsparcie dla głębokich sieci, czyli Python, C++ i Matlab, może Java i Javascript. Mamy tu 2 aspekty: trenowanie sieci i wnioskowanie z ich użyciem. Ja bym się skupił na wnioskowaniu/wykorzystaniu gotowych sieci. Czyli problem sprowadza się do tego, że mamy do rozwiązania jakiś problem, nauczoną sieć i musimy się zdecydować w jakim języku napisać docelową aplikację. I tu będą nas ograniczać wymagania stawiane aplikacji, jeśli ma być jak najszybsza, to pewnie będzie to C++, jeśli w przeglądarce, to pewnie Javascript, jeśli ma to być prototyp na szybko, to Matlab itp. Każde rozwiazanie będzie miało swoje wady i zalety, np. w Pythonie będzie można zrobić chyba najwięcej, ale pojawią się konflikty między bibliotekami, systemami operacyjnymi itp. W Matlabie nie powinno być żadnych problemów, ale pula możliwości będzie nieco ograniczona. 
Interesuje nas raczej wykorzystanie GPU w tych testach. To będzie priorytet. I to też zminimalizuje różnice między językami, bo i tak większość pracy wykona GPU. Warto jednak sprawdzić jak (i czy) da się wybrane rozwiązania uruchomić na CPU. Tu różnice mogą być większe, ale głowy nie dam, dlatego że i tak biblioteki obsługujące głębokie sieci są natywnie pisane w C++ czy w CUDA, więc i tak same sieci będą działać podobnie.Żeby to wszystko sensownie sprawdzić, najlepiej jest wziąć kilka/kilkanaście gotowych sieci realizujących typowe zadania, począwszy od klasyfikacji obrazów, poprzez rozpoznawanie obiektów, segmentację semantyczną, a skończywszy na generowaniu obrazów i percepcji głębi czy przetwarzaniu języka naturalnego albo generowaniu opisu widzianych scen, tudzież predykcji szeregów czasowych. Zdecydowana większość w/w zadań związana jest z przetwarzaniem obrazów, gdyż te zadania zajmują zwykle najwięcej czasu. I teoretycznie można się do tego ograniczyć.
Zbiór danych do testowania, jaki trzeba przygotować, nie będzie szczególnie duży - musi zawierać obrazy nadające się do przetwarzania w każdym zagadnieniu - teoretycznie to może być cokolwiek, niemniej lepiej go trochę urozmaicić, także pod względem wielkości samych obrazów.
Najtrudniejsze i najbardziej pracochłonne będzie testowanie tych samych rozwiązań w różnych językach. Pewnie okaże się, że nie wszystko da się we wszystkim uruchomić, a pula rozwiązań działająca w każdym języku będzie stosunkowo niewielka - ale może się mylę, może to już przeszłość. W tej części będzie najwięcej pracy.
 
Punktu 3 praktycznie nie będzie, to to się sprowadzi do specyfikacji komputera lub dwóch.
Ja bym dodał jakiś przegląd typowych problemów rozwiązywancyh za pomocą głębokich sieci i wybór iluś z nich do dalszego testowania.
 
Proszę łaskawie, w kolejnym wpisie, zaproponować nieco zmodyfikowany zakres.

*******************

25 września
Heinzelman Piotr (STUD)
25.09 22:30
Zmodyfikowana
Szanowny Panie Doktorze.
przygotowałem trochę materiału teoretycznego i latex, żródło tu:
https://www.overleaf.com/project/66b298a389e1ce0b84e799cd
 
Chętnie udostępnię dostęp do overleaf - poproszę tylko adres mailowy na jaki podać przy udostępnianiu.
Kod pracy udostępniłem na github:
https://github.com/piotrHeinzelman/inz
 
dodałem tam także pdf z obrazem aktualnego stanu pracy:
https://github.com/piotrHeinzelman/inz/blob/main/tex/Praca_In.pdf
 
Praca oczywiście nie jest jeszcze gotowa, i nie nadaje się do sprawdzenia. Udostępniam ją jednak, gdyby zechciał Pan po prostu zerknąć. Przeczytałem wczoraj Pana uwagi, ale jeszcze nie wprowadziłem ich, w tym tygodniu i na początku przyszłego nie będę miał możliwości zrobić czegokolwiek z pracą, poza czytaniem na tematy AI i GPU/CUDA. Nie mam jeszcze kodu w C/C++ wykorzystującego GPU. Doczytam, i dopisze kod w C. W dalszej kolejności dodam kody rozwiązujące bardziej złożone problemy o których Pan wspomina. Na koniec uruchomię te same kody na jednostce "bez" GPU, a także z wyłączonym HyperThreading. 
 
przy analizie wyników opiszę platformy eksperymentalne właśnie pod tym kątem (czym liczymy i z jakim skutkiem).
 
 
PS. zarówno w Python i w Matlab używam rozszerzeń korzystających z GPU, i udało mi się pozyskać NVidia RTX 4070.

************************8

2 października
Czajewski Witold
2.10 11:30
Zmodyfikowana
Ciekawa spraw z tym dodawaniem - nie wiedziałem tego.
Jednowymiarowa regresja liniowa nas chyba średnio interesuje. Wiadomo, że w takich przypadkach najszybszy będzie C++, jako język kompilowany. My chcemy się skupić na wykorzystaniu gotowych głębokich sieci neuronowych. Czyli np. uruchomić którąś wersję YOLO w kilku różnych językach. O ile samo przetwarzanie na GPU czy CPU zajmie tyle samo czasu, to przygotowanie obrazów oraz przetworzenie wyników otrzymanych z sieci (czyli narysowanie prostokątów, wyświetlenie obrazu itp) zajmie już wyraźnie różne czasy. A jak uruchomimy jakiś algorytm śledzący, np.  StrongSORT, który znaczną (większość?) część obliczeń robi poza GPU (jeśli się nie mylę), to te różnice mogą być jeszcze większe.
W wielu językach istnieje możliwość zaimportowania tej samej sieci w różnych formatach, tf, pth, onnx, engine. Same formaty mogą się między sobą różnić. Warto więc sprawdzić jak szybka jest wersja tej samej sieci w tym samym języku w zależności od samego jej formatu. Oraz jak to wygląda w innych językach z tymi samymi wersjami sieci.
Ja bym zaczął od którejś wersji YOLO i zobaczył co z tego wyjdzie. I wtedy trzeba będzie sformułować dobrze temat i zakres pracy.

***************************88

Heinzelman Piotr (STUD)
2.10 21:38
Zmodyfikowana
Chciałem zacząć od takich działań które mogę dla porównania wdrożyć w C++ / Java.  - stąd regresja.
W 2 kroku planowałem użyciu gotowej sieci starszej generacji, - full connected, 
a W 3 zrobić projekt głęboki z siecią splotową. 
Tak sieci głębokie owszem w 3 kroku - i to zajmie mi więcej czasu.  
a na koniec puścić wszystkie projekty bez karty graficznej - i zebrać wyniki. 
 
a chciałem już od czegoś zacząć żeby właśnie móc porozmawiać o sformuowaniu tematu i zakresu.

****************************

3 października
Czajewski Witold
3.10 09:42
Z tą regresją bym był ostrożny, bo wiele zależy od implementacji i wówczas nie wiadomo czy o prędkości decyduje język czy sposób zakodowania. Z sieciami jest prościej, bo to są te same sieci i te same biblioteki do ich uruchomienia (kilka różnych), więc nie ma mowy za bardzo o tym, że coś jest napisane nieoptymalnie i można wybrać inną, znacznie lepszą wersję, a wnioski wyjdą przeciwne. Tu nie ma specjalnego wyboru - mamy kilka bibliotek czy też kilka formatów sieci i tyle.
O jakich sieciach starszej generacji Pan pisze?

*********************

Heinzelman Piotr (STUD)
3.10 22:04
Zmodyfikowana
Regresja jest oczywista - wszystko widać - każde dodawanie i mnożenie. i widać jak na dłoni co może być liczone równolegle a co raczej nie. - i tu można sprawdzić wydajność języka. a okazuje się że C++ nie zawsze wygrywa : ). 
 
Prawda - wbudowana regresja to czarna skrzynka. Ale to bardzo dobrze. Przetestowałem wbudowane funkcje (Mat, Py), oraz dla wszystkich dodam własne "porównywalne/identyczne" implementacje. i właśnie o tym będzie ta praca - które rozwiązanie jest lepsze - kiedy i dlaczego? wbudowane ? ale w jakim języku ? Czy jestem w społeczności akademickiej ? A jeśli jest kilka implementacji - to można je też porównać. Istnieje także kryterium wygody, matematyk chętniej skorzysta z Matlaba czy Pythona niż C++ jeśli ma niewiele danych, a komputer może zostawić włączony na noc , chce skorzystać z metod obliczania macierzy odwrotnej.
 
hmm... 
porównanie własnej (naiwnej) implementacji z wbudowaną:
wbudowana : 0.1117 sek.
własna           : 0.0029 sek.
https://github.com/piotrHeinzelman/inz/tree/main/MixedProj/01.polyfit
 
./matRun
 
--- Matlab app start: ---
duration:    00:00.111753
result:     1.5731   -0.6091
 
duration simple implementation:    00:00.002900
result:    1.5731  -0.6091

-- sieci starszych generacji -- to te "w pełni połączone", a te głęboko uczone to te "ze splotami".
 
Oczywiście nie jestem specjalistą i mam bardzo szczątkową wiedzę, i właściwie teraz też się uczę i poznaję. Ale na razie, mniej więcej tak to sobie wyobrażam.

***************************

4 października
Czajewski Witold
4.10 10:00
W porządku. Teraz trzeba wiec uaktualnić temat i zakres pracy. 
 
Jak przejdzie Pan do badania sieci, to proszę najpierw dać znać jakie sieci i dlaczego takie Pan wybrał.

**************************

7 października
Heinzelman Piotr (STUD)
7.10 21:34
myślałem że wybrałem temat:
Porównanie wydajności języków programowania w przetwarzaniu obrazów z użyciem głębokich sieci neuronowych.
 
i taki chciałbym pisać. Chciałem zacząć analizę od spodu, bo po przejściu na wyższe poziomy abstrakcji będę miał do czynienia z czarnymi skrzynkami.

****************************

8 października
Czajewski Witold
8.10 09:53
Zgadza się, ten temat Pan wybrał. I teraz trzeba skonstruować zakres pracy i go nieco szczegółowiej opisać (zmodyfikowałem ostatnio wpis na kanale ogólnym na ten temat) oraz sformułować ostateczną wersję tytułu. 



